package Schedule;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.*;

/**
 * Schedule entity object
 * Created every time a schedule is generated by ScheduleGenerator
 */

public class Schedule {

    private LinkedHashMap<LocalDate, List<List<String>>> schedule;
    private List<LocalDate> week;
    private static final String WORK_HOURS = "0900-1700";
    private final String TIMESHEET_FILEPATH = "./data/Timesheets.csv";
    private final String TIME_OFF_FILEPATH = "data/Database.txt";

    /**
     * Constructor for Schedule, called by ScheduleGenerator
     *
     * @throws ParseException when invalid date format used in Database.txt (time off database)
     */
    public Schedule() throws ParseException {

        // Find days of current week, assign to week attribute
        this.week = ScheduleDAO.getCurrentWeek();

        LinkedHashMap<LocalDate, List<List<String>>> schedule = new LinkedHashMap<>();

        //Get map of employees to work dates
        Map<List<String>, List<LocalDate>> employeeDates = ScheduleDAO.getEmployeeDates(TIMESHEET_FILEPATH);

        //Get map of employee ids to time offs
        Map<String, List<LocalDate>> timeOffMap = ScheduleDAO.loadTimeOffsFromTXT(TIME_OFF_FILEPATH);

        for (LocalDate day : this.week) {

            List<List<String>> workingEmployees = new ArrayList<>();


            for (Map.Entry<List<String>, List<LocalDate>> set : employeeDates.entrySet()) {

                LocalDate startDate = set.getValue().get(0);
                LocalDate endDate = set.getValue().get(1);

                //check if employee's work dates are within day
                boolean inDay = inDay = (startDate.isBefore(day) || startDate.equals(day)) &&
                        (day.isBefore(endDate) || day.isEqual(endDate));

                //check if employee has time off approved
                boolean noTimeOff = true;
                for (Map.Entry<String, List<LocalDate>> timeOffset : timeOffMap.entrySet()) {
                    String employeeId = timeOffset.getKey();
                    LocalDate startOffDate = timeOffset.getValue().get(0);
                    LocalDate endOffDate = timeOffset.getValue().get(1);
                    if (employeeId.equals(set.getKey().get(0)) &&
                    (day.isBefore(endOffDate) || day.equals(endOffDate)) &&
                            (day.isAfter(startOffDate) || day.isEqual(startOffDate))) {
                        noTimeOff = false;
                    }
                }

                //add employee to list if no contradictions
                if (inDay && noTimeOff) {
                    workingEmployees.add(set.getKey());
                }

            }

            schedule.put(day, workingEmployees);
        }

        this.schedule = schedule;
    }

    /**
     * Return text format of schedule, called by gui
     *
     * @return the string format of the Schedule entity called by ManagerPortalBox GUI
     */
    @Override
    public String toString() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//        DateFormat timeFormat = new SimpleDateFormat("hh:mm:ss");
        StringBuilder scheduleText = new StringBuilder();
        int counter = 0;
        for (Map.Entry<LocalDate, List<List<String>>> set : this.schedule.entrySet()) {

            LocalDate day = set.getKey();
            List<List<String>> workingEmployees = set.getValue();

            // Add title for day
            String dayName = day.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault());
            String title = dayName + " (" + this.week.get(counter).format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) +
                    "):\n";
            scheduleText.append(title);

            // Add working employees for day
            for (List<String> employee : workingEmployees) {

                String employeeText = employee.get(1) + " (" + employee.get(0) + "): " + WORK_HOURS + "\n";
                scheduleText.append(employeeText);

            }

            scheduleText.append("\n");
            counter++;
        }

        return scheduleText.toString();
    }
}
